{"version":3,"sources":["Components/ListItem.jsx","Components/Header.jsx","App.js","serviceWorker.js","index.js"],"names":["ListItem","props","items","listItems","map","item","className","key","type","id","value","text","onChange","e","setUpdate","target","class","color","width","height","viewBox","fill","xmlns","onClick","deleteItem","d","fill-rule","duration","easing","Header","todoInputHandle","setState","todoList","formOnSubmitHandler","preventDefault","newItem","state","newItems","filteredItems","filter","bind","action","onSubmit","this","placeholder","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qUAiEeA,EA3DE,SAACC,GAChB,IAAMC,EAAQD,EAAMC,MACdC,EAAYD,EAAME,KAAI,SAACC,GAC3B,OACE,yBAAKC,UAAU,OAAOC,IAAKL,EAAMK,KAC/B,2BACE,2BACED,UAAU,aACVE,KAAK,OACLC,GAAIJ,EAAKE,IACTG,MAAOL,EAAKM,KACZC,SAAU,SAACC,GACTZ,EAAMa,UAAUD,EAAEE,OAAOL,MAAOL,EAAKE,QAGzC,8BACE,yBACED,UAAU,OACVU,MAAM,cACNC,MAAM,UACNC,MAAM,QACNC,OAAO,QACPC,QAAQ,YACRC,KAAK,eACLC,MAAM,6BACNC,QAAS,WACPtB,EAAMuB,WAAWnB,EAAKE,OAGxB,0BAAMkB,EAAE,oKACR,0BACEC,YAAU,UACVD,EAAE,sPAkBhB,OACE,yBAAKnB,UAAU,aACb,kBAAC,IAAD,CAAUqB,SAAU,IAAKC,OAAO,eAC7BzB,KCuBM0B,G,6DA7Eb,WAAY5B,GAAQ,IAAD,8BACjB,cAAMA,IAaR6B,gBAAkB,SAACjB,GACjB,EAAKkB,SAAS,CACZC,SAAU,CACRrB,KAAME,EAAEE,OAAOL,MACfH,IAAKM,EAAEE,OAAOL,UAlBD,EAuBnBuB,oBAAsB,SAACpB,GACrBA,EAAEqB,iBACF,IAAMC,EAAU,EAAKC,MAAMJ,SAC3B,GAAqB,KAAjBG,EAAQxB,KAAa,CACvB,IAAM0B,EAAQ,sBAAO,EAAKD,MAAMlC,OAAlB,CAAyBiC,IACvC,EAAKJ,SAAS,CACZ7B,MAAOmC,EACPL,SAAU,CACRrB,KAAM,GACNJ,IAAK,QAhCM,EAqCnBiB,WAAa,SAACjB,GACZ,IAAM+B,EAAgB,EAAKF,MAAMlC,MAAMqC,QAAO,SAAClC,GAAD,OAAUA,EAAKE,MAAQA,KACrE,EAAKwB,SAAS,CACZ7B,MAAOoC,KAxCQ,EA2CnBxB,UAAY,SAACH,EAAMJ,GACjB,IAAML,EAAQ,EAAKkC,MAAMlC,MACzBA,EAAME,KAAI,SAACC,GACLA,EAAKE,MAAQA,IACfF,EAAKM,KAAOA,MAGhB,EAAKoB,SAAS,CACZ7B,MAAOA,KAjDT,EAAKkC,MAAQ,CACXlC,MAAO,GACP8B,SAAU,CACRrB,KAAM,GACNJ,IAAK,KAGT,EAAKuB,gBAAkB,EAAKA,gBAAgBU,KAArB,gBACvB,EAAKP,oBAAsB,EAAKA,oBAAoBO,KAAzB,gBAC3B,EAAKhB,WAAa,EAAKA,WAAWgB,KAAhB,gBAClB,EAAK1B,UAAY,EAAKA,UAAU0B,KAAf,gBAZA,E,qDAuDjB,OACE,6BACE,0BAAMlC,UAAU,GAAGmC,OAAO,GAAGC,SAAUC,KAAKV,qBAC1C,2BACE3B,UAAU,aACVE,KAAK,OACLoC,YAAY,kBACZlC,MAAOiC,KAAKP,MAAMJ,SAASrB,KAC3BC,SAAU+B,KAAKb,kBAEjB,4BAAQxB,UAAU,WAAlB,QAEF,kBAAC,EAAD,CACEJ,MAAOyC,KAAKP,MAAMlC,MAClBsB,WAAYmB,KAAKnB,WACjBV,UAAW6B,KAAK7B,iB,GAvEL+B,cCUNC,MATf,WACE,OACE,yBAAKxC,UAAU,OACb,wCACA,kBAAC,EAAD,QCGcyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0e736aaa.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./ListItem.css\";\r\nimport FlipMove from \"react-flip-move\";\r\n// import { faTrash } from \"@fortawesome/free-solid-svg-icons\";\r\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nconst ListItem = (props) => {\r\n  const items = props.items;\r\n  const listItems = items.map((item) => {\r\n    return (\r\n      <div className=\"list\" key={items.key}>\r\n        <p>\r\n          <input\r\n            className=\"list-input\"\r\n            type=\"text\"\r\n            id={item.key}\r\n            value={item.text}\r\n            onChange={(e) => {\r\n              props.setUpdate(e.target.value, item.key);\r\n            }}\r\n          />\r\n          <span>\r\n            <svg\r\n              className=\"icon\"\r\n              class=\"bi bi-trash\"\r\n              color=\"#e74c3c\"\r\n              width=\"1.7em\"\r\n              height=\"1.7em\"\r\n              viewBox=\"0 0 16 16\"\r\n              fill=\"currentColor\"\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              onClick={() => {\r\n                props.deleteItem(item.key);\r\n              }}\r\n            >\r\n              <path d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\" />\r\n              <path\r\n                fill-rule=\"evenodd\"\r\n                d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\"\r\n              />\r\n            </svg>\r\n          </span>\r\n          {/* <span>\r\n            <FontAwesomeIcon\r\n              icon={faTrash}\r\n              onClick={() => {\r\n                props.deleteItem(item.key);\r\n              }}\r\n            />\r\n          </span> */}\r\n\r\n          {/* <img src={remove} alt=\"asd\" height=\"40px\" width=\"40px\" /> */}\r\n        </p>\r\n      </div>\r\n    );\r\n  });\r\n  return (\r\n    <div className=\"todo-list\">\r\n      <FlipMove duration={200} easing=\"ease-in-out\">\r\n        {listItems}\r\n      </FlipMove>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ListItem;\r\n","import React, { Component } from \"react\";\r\nimport ListItem from \"./ListItem\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"./Header.css\";\r\nclass Header extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      items: [],\r\n      todoList: {\r\n        text: \"\",\r\n        key: \"\",\r\n      },\r\n    };\r\n    this.todoInputHandle = this.todoInputHandle.bind(this);\r\n    this.formOnSubmitHandler = this.formOnSubmitHandler.bind(this);\r\n    this.deleteItem = this.deleteItem.bind(this);\r\n    this.setUpdate = this.setUpdate.bind(this);\r\n  }\r\n  todoInputHandle = (e) => {\r\n    this.setState({\r\n      todoList: {\r\n        text: e.target.value,\r\n        key: e.target.value,\r\n      },\r\n    });\r\n  };\r\n\r\n  formOnSubmitHandler = (e) => {\r\n    e.preventDefault();\r\n    const newItem = this.state.todoList;\r\n    if (newItem.text !== \"\") {\r\n      const newItems = [...this.state.items, newItem];\r\n      this.setState({\r\n        items: newItems,\r\n        todoList: {\r\n          text: \"\",\r\n          key: \"\",\r\n        },\r\n      });\r\n    }\r\n  };\r\n  deleteItem = (key) => {\r\n    const filteredItems = this.state.items.filter((item) => item.key !== key);\r\n    this.setState({\r\n      items: filteredItems,\r\n    });\r\n  };\r\n  setUpdate = (text, key) => {\r\n    const items = this.state.items;\r\n    items.map((item) => {\r\n      if (item.key === key) {\r\n        item.text = text;\r\n      }\r\n    });\r\n    this.setState({\r\n      items: items,\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form className=\"\" action=\"\" onSubmit={this.formOnSubmitHandler}>\r\n          <input\r\n            className=\"todo-input\"\r\n            type=\"text\"\r\n            placeholder=\"Enter Text Here\"\r\n            value={this.state.todoList.text}\r\n            onChange={this.todoInputHandle}\r\n          />\r\n          <button className=\"add-btn\">ADD</button>\r\n        </form>\r\n        <ListItem\r\n          items={this.state.items}\r\n          deleteItem={this.deleteItem}\r\n          setUpdate={this.setUpdate}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./Components/Header\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>TODO APP</h1>\n      <Header />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}